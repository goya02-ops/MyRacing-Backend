// src/app.ts
import 'reflect-metadata/Reflect.js' // Importante: debe estar al principio para MikroORM y TypeScript
import express from 'express'
import { RequestContext } from '@mikro-orm/core'
import { orm } from './shared/orm.js' // Importa la instancia 'orm' desde el archivo que ya configuramos

// Importa tus routers aqu√≠ para las diferentes entidades
import { categoryRouter } from './category/category.routes.js'
import { simulatorRouter } from './simulator/simulator.routes.js'

const app = express()
const port = 3000 // Puerto en el que se ejecutar√° tu servidor Express

// Middleware para parsear el cuerpo de las solicitudes JSON
app.use(express.json())

// A√ëADIDO PARA DEPURACI√ìN: Verifica si orm.em est√° definido ANTES de usarlo en el RequestContext
console.log('DEBUG: orm.em antes de RequestContext:', orm.em ? 'definido' : 'UNDEFINED');


// Configuraci√≥n de las rutas base para tus APIs
// Todas las rutas definidas en categoryRouter se acceder√°n a trav√©s de /api/categories
app.use('/api/categories', categoryRouter)
// Todas las rutas definidas en simulatorRouter se acceder√°n a trav√©s de /api/simulators
app.use('/api/simulators', simulatorRouter)


// Funci√≥n as√≠ncrona para inicializar la aplicaci√≥n
// Esto es importante porque la inicializaci√≥n de MikroORM es as√≠ncrona
async function init() {
  try {
    // MikroORM.init ya se ejecuta al exportar 'orm' en 'shared/orm.ts' (gracias a 'await')
    // por lo que no necesitas orm.connect() aqu√≠. La conexi√≥n ya estar√° lista.

    // Sincronizar el esquema de la base de datos con tus entidades definidas en MikroORM.
    // Esto crear√° las tablas (Category, Simulator) si no existen o las actualizar√°.
    // Utiliza 'updateSchema()' para cambios incrementales. Puedes usar '.sync()' para una sincronizaci√≥n
    // m√°s completa que puede ser destructiva (ej. borrar columnas que ya no est√°n en tu entidad).
    await orm.getSchemaGenerator().updateSchema()
    console.log('‚úÖ Esquema de la base de datos sincronizado correctamente.')

    // Iniciar el servidor Express despu√©s de que la base de datos est√© lista
    app.listen(port, () => {
      console.log(`üöÄ Servidor Express ejecut√°ndose en http://localhost:${port}`)
      console.log('Pulsa Ctrl-C para detener el servidor.')
    })
  } catch (error) {
    // Si ocurre un error durante la inicializaci√≥n (ej. problema de conexi√≥n a DB), lo mostramos y salimos
    console.error('‚ùå Error al inicializar la aplicaci√≥n:', error)
    process.exit(1) // Terminar el proceso con un c√≥digo de error
  }
}

// Llama a la funci√≥n de inicializaci√≥n para arrancar la aplicaci√≥n
init()